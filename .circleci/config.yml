version: 2.1
orbs:
  kubernetes: circleci/kubernetes@0.3.0

jobs:
  # Executing tests (by benefiting from caching)
  tests:
    docker:
      - image: circleci/python:3.7
    parallelism: 3
    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local
      - restore_cache:
          keys:
            - tests-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/config.yml" }}
      - run: .circleci/prepare.sh
      - run: ./run_tests.sh
      - save_cache:
          paths:
            - /usr/local/lib/python3.7/site-packages
            - /usr/local/bin
          key: tests-v1-{{ .Branch }}-{{ checksum "requirements.txt" }}-{{ checksum ".circleci/config.yml" }}

  # Fetching the build infos to prepare the container build
  get-build-infos:
    docker:
      - image: habx/devops-build-infos
    working_directory: /work
    steps:
      - checkout
      - run: /build/run.sh
      - persist_to_workspace:
          root: /work
          paths:
            - version.txt
            - package.json
            - build.json

  # Building the container and uploading it
  build-container:
    docker:
      - image: plugins/ecr:17.05
    working_directory: /work
    steps:
      - checkout
      - attach_workspace:
          at: /work
      - run: ls -lh
      - setup_remote_docker:
          docker_layer_caching: true
      - run: .circleci/build-container.sh

  notify-optimizer-result-for-new-version:
    docker:
      - image: alpine
    working_directory: /work
    steps:
      - checkout
      - run:
          command: |
            apk update
            apk add ca-certificates curl
      - attach_workspace:
          at: /work
      - run: .circleci/notify-optimizer-result-for-new-version.sh

  # Publishing the the tasks
  deploy-to-kubernetes-standard-worker:
    docker:
    - image: circleci/buildpack-deps:stretch
      user: root
    steps:
      - kubernetes/install:
          kubectl-version: v1.15.0
      - run:
          name: Configure kubernetes
          command: |
            kubectl config set-credentials default --token=${KUBERNETES_TOKEN_DEV}
            kubectl config set-cluster default --server=${KUBERNETES_SERVER_DEV} --insecure-skip-tls-verify=true
            kubectl config set-context default --cluster=default --user=default
            kubectl config use-context default
      - kubernetes/update-container-image:
          container-image-updates: ${CIRCLE_PROJECT_REPONAME}=${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}:$(if [ -z "$CIRCLE_TAG" ]; then echo $(echo $CIRCLE_BRANCH | sed 's/\/\|@//g')-${CIRCLE_SHA1:0:7}; else echo $CIRCLE_TAG; fi)
          resource-name: deployment/${CIRCLE_PROJECT_REPONAME}
          namespace: $(if [ -z "$CIRCLE_TAG" ]; then echo dev; else echo staging; fi)
          show-kubectl-command: true

  deploy-to-kubernetes-low-priority-worker:
    docker:
    - image: circleci/buildpack-deps:stretch
      user: root
    steps:
      - kubernetes/install:
          kubectl-version: v1.15.0
      - run:
          name: Configure kubernetes
          command: |
            kubectl config set-credentials default --token=${KUBERNETES_TOKEN_DEV}
            kubectl config set-cluster default --server=${KUBERNETES_SERVER_DEV} --insecure-skip-tls-verify=true
            kubectl config set-context default --cluster=default --user=default
            kubectl config use-context default
      - kubernetes/update-container-image:
          container-image-updates: ${CIRCLE_PROJECT_REPONAME}=${AWS_ECR_ACCOUNT_URL}/${CIRCLE_PROJECT_REPONAME}-low-priority:$(if [ -z "$CIRCLE_TAG" ]; then echo $(echo $CIRCLE_BRANCH | sed 's/\/\|@//g')-${CIRCLE_SHA1:0:7}; else echo $CIRCLE_TAG; fi)
          resource-name: deployment/${CIRCLE_PROJECT_REPONAME}-low-priority
          namespace: $(if [ -z "$CIRCLE_TAG" ]; then echo dev; else echo staging; fi)
          show-kubectl-command: true

workflows:
  version: 2
  ci-process:
    jobs:
      - get-build-infos:
          filters:
            tags:
              only: /^v.*/

      - tests:
          filters:
            tags:
              only: /^v.*/

      - build-container:
          context: default_env_vars
          requires:
            - get-build-infos
          filters:
            tags:
              only: /^v.*/

      - notify-optimizer-result-for-new-version:
          context: default_env_vars
          requires:
            - build-container
          filters:
            tags:
              only: /^v.*/

      - deploy-to-kubernetes-standard-worker:
          context: default_env_vars
          requires:
            - build-container
            - tests
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - dev

      - deploy-to-kubernetes-low-priority-worker:
          context: default_env_vars
          requires:
            - build-container
            - tests
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - dev
